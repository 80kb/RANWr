using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using static gablibela.lib_RASD;

namespace AnimSoundMaker
{
    public partial class Editor_RASD : Page
    {
        public ObservableCollection<Event> Events;
        public string Path = "";
        public EventTypes type { get; set; }
        public uint frameSize { get; set; }
        public RASD loadedFile;

        public Editor_RASD()
        {
            InitializeComponent();
        }


        public void LoadData(RASD rasd)
        {
            Path = rasd.FilePath;
            Events = new();
            foreach(var e in rasd.AnimSound.Events) 
            { 
                Events.Add(e);
            }
            loadedFile = rasd;
            DataGrid.ItemsSource = Events;
            frameSize = rasd.AnimSound.FrameSize;
            FrameCount.Text = frameSize.ToString();
        }

        public void ConfirmAnyEdits()
        {
            Keyboard.ClearFocus();
            DataGrid.CommitEdit();
        }

        public RASD GetData()
        {
            List<Event> newEvent = new();
            Events = (ObservableCollection<Event>)DataGrid.ItemsSource;
            foreach (Event e in Events)
            {
                Debug.WriteLine(e.Name);
                newEvent.Add(e);
            }
            frameSize = uint.Parse(FrameCount.Text);
            loadedFile.AnimSound.Events = newEvent;
            loadedFile.AnimSound.FrameSize = frameSize;
            return loadedFile;
        }

        private void AdjustColumns()
        {
            DataGrid.Columns.Last().Width = new DataGridLength(2, DataGridLengthUnitType.Star);
            DataGrid.Columns[3].Width = new DataGridLength(2, DataGridLengthUnitType.Star);
            DataGrid.Columns[2].Width = new DataGridLength(1.25, DataGridLengthUnitType.Star);
            
            /*
            DataGrid.Columns[0].CellStyle = FindResource("MyCellStyle") as Style;
            DataGrid.Columns[1].CellStyle = FindResource("MyCellStyle") as Style;
            DataGrid.Columns[5].CellStyle = FindResource("MyCellStyle") as Style;
            DataGrid.Columns[6].CellStyle = FindResource("MyCellStyle") as Style;
            DataGrid.Columns[7].CellStyle = FindResource("MyCellStyle") as Style;
            */
        }

        public enum EventTypes
        {
            Range = 0,
            Trigger = 1
        }

        public static IEnumerable<EventTypes> GetEnumTypes => Enum.GetValues(typeof(EventTypes)).Cast<EventTypes>();

        private void DataGrid_AutoGeneratedColumns(object sender, EventArgs e)
        {
            AdjustColumns();
        }

        private void FrameCount_TextChanged(object sender, TextChangedEventArgs e)
        {
            bool? result = uint.TryParse(FrameCount.Text, out uint output);
            if (result == true) frameSize = output;
        }


        private static readonly Regex _regex = new Regex("[^0-9]+");
        private static bool IsTextAllowed(string text)
        {
            return !_regex.IsMatch(text);
        }

        private void FrameCount_PreviewTextInput(object sender, TextCompositionEventArgs e)
        {
            if(!IsTextAllowed(e.Text)) e.Handled= true;
        }

        private void AddItem_Click(object sender, RoutedEventArgs e)
        {
            Events.Add(new Event());
        }

        private void DataGrid_SourceUpdated(object sender, DataTransferEventArgs e)
        {
            DataGrid.Items.Refresh();
        }

        private void Paste_CanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            e.Handled = true;
            e.CanExecute = true;
        }


        private DataGridCell _currentCell;

        private void Paste_Executed(object sender, ExecutedRoutedEventArgs e)
        {
            string data = Clipboard.GetText();
            if (data == null) return;
            string[] splitEntries = data.Split('\n');
            
            foreach (var entry in splitEntries)
            {
                string[] splitData = entry.Split("\t");
                if (splitData.Length % 8 == 0)
                {
                    int count = splitData.Length / 8;
                    Event @event = new();
                    @event.Start = uint.Parse(splitData[0]);
                    @event.End = int.Parse(splitData[1]);
                    @event.Type = (gablibela.lib_RASD.EventTypes)(splitData[2] == "Trigger" ? EventTypes.Trigger : EventTypes.Range);
                    @event.Name = splitData[3];
                    @event.Pitch = int.Parse(splitData[4]);
                    @event.Volume = int.Parse(splitData[5]);
                    @event.UserParameter = uint.Parse(splitData[6]);
                    @event.Comment = splitData[7];
                    Events.Add(@event);
                }
                else if (splitData.Length == 1)
                {
                    if (DataGrid.CurrentItem is not Event) return;

                    Event @event = (Event)DataGrid.CurrentItem;
                    var pasteData = splitData[0];
                    var columnIndex = DataGrid.CurrentColumn.DisplayIndex;
                    var rowIndex = DataGrid.SelectedIndex;

                    //TODO


                }
            }
        }
    }
}
